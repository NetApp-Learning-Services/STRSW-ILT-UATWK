Pre-demo setup:

1. Enable rhel4 and rhel5
2. Copy 1_x_setup.sh and 2_x_setup.sh to rhel3
3. Execute sh scripts with docker password

0. Install Helm:

Invoke-WebRequest -Uri https://get.helm.sh/helm-v3.9.1-windows-amd64.zip -OutFile helm.zip; Expand-Archive helm.zip -DestinationPath C:\ProgramData\chocolatey\lib\helm\tools; Remove-Item helm.zip; Set-Location C:\ProgramData\chocolatey\lib\helm\tools; Set-ExecutionPolicy Bypass -Scope Process -Force; .\install.ps1

1. Create helm repo:

helm repo add bitnami https://charts.bitnami.com/bitnami

2. Setup wordpress: 

helm install mywordpressapp bitnami/wordpress --version 23.1.21 --namespace mywordpressapp --values=“./Exercise 5/exercise5Task3-4.yaml“ --create-namespace 

3. Setup app:

protectctl get app 

4. Look what namespace:

cat  ~/.trident-protect/protectctl.yaml

5. Create application (exercise5Task4-1.yaml):

protectctl create application mywordpressapp --namespaces mywordpressapp

6. Create an appvault (exercise5Task2-2.yaml):

Show bucket in System Manager
kubectl get secret s3-src-creds
protectctl create appvault ontap-s3 ontap-s3-appvault -b tp-store 
-e 192.168.0.31 --skip-cert-validation -s s3-src-creds

7.  Create a snapshot ():

protectctl create snapshot mywordpressapp-snap-1 --appvault ontap-s3-appvault --app mywordpressapp

8.  Create a backup ():

protectctl create backup mywordpressapp-bkup-1 --appvault ontap-s3-appvault --app mywordpressapp
protectctl get backup
protectctl get appvaultcontent ontap-s3-appvault --show-paths

9. Restore a backup to a new namespace ():

protectctl create backuprestore mywordpressapp-bkupr1 mywordpressapp:mywordpressapp1 --backup mywordpressapp-bkup-1 protectctl create backuprestore mywordpressapp-bkupr1 mywordpressapp:mywordpressapp1 --backup mywordpressapp-bkup-1 
protectctl get backuprestore

10.  Restore a backup in-place ():

protectctl create backupinplacerestore mywordpressapp-backupipr1 --backup mywordpressapp-bkup-1
protectctl get backupinplacerestore

11. Review requirements for second cluster:

Trident operator - Trident config
CSI snapshot support
default volume snapshot class
MetalLB - metallb config
Trident protect and Trident protect creds
Review SVM and S3 bucket and NFS in 2nd ONTAP cluster
Ensure source appvault and destination appvault - with secrets
Review TBC and StorageClasses 

12. Restore a app into second cluster:

kubectl create -f exercise5Task5-4.yaml 
kubectl -n trident-protect get backuprestore
kubectl -n [target namespace] get all,pvc
kubectl -n trident-protect get applications

APPMIRROR

13. Setup a schedule for the wordpress application that takes snapshot copies every 5 minutes and retends 5 total snapshots:  

kubectl -n trident-protect get applications mywordpressapp -o "jsonpath={.metadata.uid}"
SAVE UID FOR step 16

kubectl create -f exercise6Task4-3.yaml

14. Create a destination namespace in 2nd cluster:

kubectl create -f exercise6Task4-6.yaml

15. Create a destination app in 2nd cluster:

kubectl create -f exercise6Task4-7.yaml

16. Edit the exercise6Task4-8.yaml to update the change_me value for the sourceApplicationUID:

17. Create the application mirror relationship in the destination cluster:

kubectl create -f exercise6Task4-8.yaml
kubectl -n trident-protect get amr amr-mywordpressapp-dst -w
kubectl -n mywordpressapp-dst get all,pvc

18.  Failover:

kubectl patch amr -n trident-protect amr-mywordpressapp-dst -p '[{"op": "replace", "path": "/spec/desiredState", "value":"promoted"}]'
kubectl -n trident-protect get amr amr-mywordpressapp-dst -w
kubectl -n mywordpressapp-dst get all,pvc

Login into app, what about old app?

19. Failback:

kubectl patch amr -n trident-protect amr-mywordpressapp-dst -p '[{"op": "replace", "path": "/spec/desiredState", "value":"established"}]'
kubectl -n trident-protect get amr amr-mywordpressapp-dst -w
kubectl -n mywordpressapp-dst get all,pvc

